{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","getMovie","fetch","then","response","json","FindMovie","addMovie","useState","setTitle","preview","setPreview","error","setError","findMovie","a","Response","Title","Plot","Poster","imdbID","onSubmit","event","preventDefault","htmlFor","type","id","value","placeholder","classNames","onChange","target","onClick","App","data","setMovies","newMovie","find","ReactDOM","render","document","getElementById"],"mappings":"mxEAIaA,G,kBAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MADuB,IAEvBC,mBAFuB,MAET,GAFS,EAGvBC,EAHuB,EAGvBA,OACAC,EAJuB,EAIvBA,QAJuB,OAMvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZH,EACD,6BACA,uBAAGM,KAAMJ,GAAT,aC/BKK,EAAa,SAAC,GAAD,QACxBC,cADwB,MACf,GADe,SAGxB,yBAAKL,UAAU,UACZK,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAWC,IAAKD,EAAME,QAAYF,S,sDCT3BG,EAAW,SAAAd,GAAK,OAAIe,MAAM,GAAD,OAFrB,+CAEqB,OAAef,IAClDgB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WCMhBC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACfC,mBAAS,IADM,mBAClCrB,EADkC,KAC3BsB,EAD2B,OAEXD,mBAASZ,EAAO,IAFL,mBAElCc,EAFkC,KAEzBC,EAFyB,OAGfH,oBAAS,GAHM,mBAGlCI,EAHkC,KAG3BC,EAH2B,KAKnCC,EAAS,uCAAG,4BAAAC,EAAA,sEACId,EAASd,GADb,OAGO,WAFjBW,EADU,QAGNkB,SACRL,EAAW,CACTxB,MAAOW,EAAMmB,MACb7B,YAAaU,EAAMoB,KACnB7B,OAAQS,EAAMqB,OACd7B,QAAQ,6BAAD,OAA+BQ,EAAMsB,QAC5CpB,OAAQF,EAAMsB,SAGhBP,GAAS,GAZK,2CAAH,qDAgBf,OACE,oCACE,0BACEtB,UAAU,aACV8B,SAAU,SAACC,GACTA,EAAMC,mBAGR,yBAAKhC,UAAU,SACb,2BAAOA,UAAU,QAAQiC,QAAQ,eAAjC,eAIA,yBAAKjC,UAAU,WACb,2BACEkC,KAAK,OACLC,GAAG,cACHC,MAAOxC,EACPyC,YAAY,0BACZrC,UAAWsC,IAAW,QAAS,CAC7B,YAAajB,IAEfkB,SAAU,SAACR,GACTb,EAASa,EAAMS,OAAOJ,OACtBd,GAAS,OAKdD,GACC,uBAAGrB,UAAU,kBAAb,yCAMJ,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,4BACEkC,KAAK,SACLlC,UAAU,kBACVyC,QAAS,kBAAMlB,MAHjB,iBASF,yBAAKvB,UAAU,WACb,4BACEkC,KAAK,SACLlC,UAAU,oBACVyC,QAAS,WACPzB,EAASG,GACTD,EAAS,MALb,sBAcN,yBAAKlB,UAAU,aACb,wBAAIA,UAAU,SAAd,WACA,kBAAC,EAAcmB,MCxFVuB,EAAM,WAAO,IAAD,EACKzB,mBAAS0B,GADd,mBAChBtC,EADgB,KACRuC,EADQ,KAWvB,OACE,yBAAK5C,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYK,OAAQA,KAEtB,yBAAKL,UAAU,WACb,kBAAC,EAAD,CAAWgB,SAdA,SAAC6B,GACZxC,EAAOyC,MAAK,SAAAvC,GAAK,OAAIA,EAAME,SAAWoC,EAASpC,WAInDmC,EAAU,CAACC,GAAF,mBAAexC,WCT5B0C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f19cf696.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const BASE_URL = 'https://www.omdbapi.com/?apikey=a0e39ca2&t=';\n\nexport const getMovie = title => fetch(`${BASE_URL}${title}`)\n  .then(response => response.json());\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './FindMovie.scss';\n\nimport { MovieCard } from '../MovieCard';\nimport movies from '../../api/movies.json';\nimport { getMovie } from '../../api/api';\n\nexport const FindMovie = ({ addMovie }) => {\n  const [title, setTitle] = useState('');\n  const [preview, setPreview] = useState(movies[0]);\n  const [error, setError] = useState(false);\n\n  const findMovie = async() => {\n    const movie = await getMovie(title);\n\n    if (movie.Response !== 'False') {\n      setPreview({\n        title: movie.Title,\n        description: movie.Plot,\n        imgUrl: movie.Poster,\n        imdbUrl: `https://www.imdb.com/title${movie.imdbID}`,\n        imdbId: movie.imdbID,\n      });\n    } else {\n      setError(true);\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(event) => {\n          event.preventDefault();\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              value={title}\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', {\n                'is-danger': error,\n              })}\n              onChange={(event) => {\n                setTitle(event.target.value);\n                setError(false);\n              }}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={() => findMovie()}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={() => {\n                addMovie(preview);\n                setTitle('');\n              }}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        <MovieCard {...preview} />\n      </div>\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n\n  const addMovie = (newMovie) => {\n    if (movies.find(movie => movie.imdbId === newMovie.imdbId)) {\n      return;\n    }\n\n    setMovies([newMovie, ...movies]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}